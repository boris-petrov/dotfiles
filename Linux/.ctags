--recurse=yes
--tag-relative=yes
--fields=+iaS
--c++-kinds=+p
--extra=+q

--exclude=node_modules
--exclude=vendor
--exclude=coverage

--langdef=coffee
--langmap=coffee:.coffee
--regex-coffee=/(^|=\s*)class\s+(\w+\.)*(\w+)(\s+extends\s+(\w+\.)*\w+)?$/\3/c,class/
--regex-coffee=/^\s*@?(\w+):.*?[-=]>.*$/\1/m,method/
--regex-coffee=/^\s*(module\.)?(exports\.)?(\w+)\s*=.*[-=]>.*$/\3/f,function/
--regex-coffee=/(constructor:\s+\()@(\w+)/\2/f,field/
--regex-coffee=/(constructor:\s+\()@\w+\s*,\s*@(\w+)/\2/f,field/
--regex-coffee=/(constructor:\s+\()@\w+\s*,\s*@\w+\s*,\s*@(\w+)/\2/f,field/
--regex-coffee=/(constructor:\s+\()@\w+\s*,\s*@\w+\s*,\s*@\w+\s*,\s*@(\w+)/\2/f,field/

--langdef=Clojure
--langmap=Clojure:.clj
--regex-clojure=/\([ \t]*create-ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/
--regex-clojure=/\([ \t]*def[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/d,definition/
--regex-clojure=/\([ \t]*defn-?[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/f,function/
--regex-clojure=/\([ \t]*defmacro[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/m,macro/
--regex-clojure=/\([ \t]*definline[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/i,inline/
--regex-clojure=/\([ \t]*defmulti[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/a,multimethod definition/
--regex-clojure=/\([ \t]*defmethod[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/b,multimethod instance/
--regex-clojure=/\([ \t]*defonce[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/c,definition (once)/
--regex-clojure=/\([ \t]*defstruct[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/s,struct/
--regex-clojure=/\([ \t]*intern[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/v,intern/
--regex-clojure=/\([ \t]*ns[ \t]+([-[:alnum:]*+!_:\/.?]+)/\1/n,namespace/
